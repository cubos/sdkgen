type FooType {
    fooStr: string
    fooInt: uint
    fooFloat: float
    fooEnum: enum {
        eu
        voce
    }
}

type FooName { 
    name: string
}

type User {
    ...FooName
    password: string?
    avatar: bytes?
}

type UserProfile {
    user: User
    profileName: string?
}

get user(user: User): User

get fooString(var1: string): string

get fooBase64(var1: base64): base64

get fooCnpj(var1: cnpj): cnpj

get fooCep(var1: cep): cep

get fooCpf(var1: cpf): cpf

get fooDate(var1: date): date

get fooEmail(var1: email): email

get fooFloat(var1: float): float

get fooInt(var1: int): int

get fooUInt(var1: uint): uint

get fooBytes(var1: bytes): bytes

get fooDateTime(var1: datetime): datetime

get fooMoney(var1: money): money 

get fooPhone(var1: phone): phone

get fooUrl(var1: url): url 

get fooUuid(var1: uuid): uuid

get fooXml(var1: xml): xml

get fooUserProfile(user: UserProfile): UserProfile

get users(id: string): User[]

get profiles(): UserProfile[]

get list(users: User[]): UserProfile[]

get optPram(param: User?): User?

get date(date: date): date

get listOpt(users: User[]?): UserProfile[]?

get dateOpt(date: date?): date?
get dateListOpt(date: date[]?): date[]?

get datetime(date: datetime): datetime
get datetimeOpt(date: datetime?): datetime?
get datetimeListOpt(date: datetime[]?): datetime[]?
get isMyDick(param1: bool): bool
get optString(): string?